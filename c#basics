.NET
    -Desktop applications
    -web applications
    -Mobile applications
 Csharp
  ->object oriented
  ->Platform independent
Constructor
  -it is special method present under a class  responisble for initilizing the varibles of that class
  -the name of a constructor method is exactly the same name of the class in which it was present
  -it is a nov-value returing method
  -each and every calss requires this constructor if we want to create the instance of that class.
  -Implicitly defined constructors also known as default constructors.
  -Imlicitly defined constructor are public
  -we can also define a constructor under the class
  Defining
          -Implicit or Explicit
  Calling 
        -Explicit
Types of Constructors
  -Default or Parameter Less Constructor
      If a constrcutor method does not take any parameter then we call that as default parameter   
  -Parameterized Constructor
      if a constructor method does take parameters it's called Parameterized constructos
  -Copy Constructor
    -if we want to create multiple instances with the same values then we use these copy constructors
    -In a copy constructor the constructor takes the same class as a parameter to it
  -Static Constructor
    -if a constructor is explicitly declared by using static modifier we called that as static constructor
    -if a class contains any static varibles then only implicit static constructors will be present or else
     we need to define them explicitly where as non-static constructor will be implicitly defined in every calss
    -static constructor are responsible in intializing static varibles and these constructors are never called explicitly
    -static constructor can not be parameterized so overloading static constructor is not possible.
    -it will be invoked only once for any number of instance the class
    -you can create only one static constructor
  -Private constructor
    -private constructor is used to restrict the class from being inherited
    -Used when class contains every member as static
Why constructors are needed in our class
    Every class requires a constructor to be present init if we want to create the instance of that class
    what is the need of defining constructor explicitly ?
      if we define constructors explicitly with parameters then we will get chang of initializing  the fields or varibles of the class
      with a new value every time we are going to create instance of the class.
static constructors and non static constructors
  -static constructors are called implicitly whereas non-static constructors must be explicitly called
  -static constructors executes immediately once the execution of a class starts and more over it's the first block of code to run under
   a class whereas non static constructors are executed after creating the instance of the class as well as each and every instance of the 
   class is created
  -In the life cycle of a class static constructor executes one and only one time where as non-static constructor executes for
   zero times if no instances are created  and  n times
  
  Class : it's a userdefined type
  First f=new First(); //f is instance of class
  First f;  //f is varible of class
  f=new First(); //f is instance of class
  Varible of class : A copy of class that is not initialized
  Instance of class : A copy of class that is initialized by using the new keyword
                      which has its own memory and never shared with another instance
  Reference of class:a copy of the class that is initialized by using existing instance
                     and references of class will not have any memory allocation they wiil
                     be sharing the same memory of the instance that is assigend for initialization
  First f1=new First(); // f1 is a instance of class
  First f2=f1; //f2 is a reference of a class

Access Specifiers
    it is special kind of modifiers using which we can define the scope of a type and it's members.
    private:private members only be accessed within the class that contains them
    internal:can only be accessed from the current project
    protected:can be accessed from a containg class and types inherited from the containg class
    protected internal: the same class or same assembly(same project),or within any class derived from the elements class
    public:anywhere in the application
Different kinds of varibles
    Non-Static
    Static
    constants
    ReadOnly
Different kinds of varibles in a class
	1.Non-static
		-if a varible is explicitly declared by using the static modifier or else 
		  if a varible is declared under any static block then those varibles are static
		  where as rest of the others are non-static
		-static members of a class doesn't require the instance of class for initialization or
		  execution also
		-in the life cycle of a class static varible is initialized one
		  and only one time,whereas instance varibles initialized for 0 times
		  if no instance are created and n times if n instances are created
	2.static
	3.Constants
		-if a varible is declared by using the keyword "cosnt" we call it as constant varible
		 and these constanct varibles can't be modified once after their declaration,so its
		 must to initialize constant varibles at the time declaration only
		-the behaviour of constant varibles will be similar to the behaviour of static varibles
		  i.e initialized one and only one time in the life cycle of a class and does not require
		      the instance of class for accessing or intializing
	4.ReadOnly
		-if a varible is declared by using the readonly keyword we call that varibles as a readonly
	 	 varible and these varibles also can't be modified like constant but after initalization
		-The behaviour of readonly varibles will be similar to the behaviour of non-static varibles
-the only difference between a static and constant varibles is static varibles can be modified whereas constant 
 varibles can't be modified

-the only difference between readonly and non-static varibles is non-staic varibles can be modified but not readonly varibles

-Constant varibles is a fixed value for the whole clas where as readonly varibles is fixed value specific to an
 an instance of class

Inheritance
	-it is a mechanism of cosnuming the members of one classs in another class by establishing 
	 parent/child relationship between the classes
	-it provides re-usability
	-Parent or Base or super
	-Child or Derived or Sub
	-1.Parent classes constructor must be accessible to child class,otherwise will not be possible
Which statements are true for an int/Integer built in .NET data type?
	It supports bitwise operators.
	The ToString method can be used for formatting a numerical value.

A class inherits a base class and it overrides a method from that base class.
Select all possible forms of the base class and its method:
	The base class can be abstract in C# (MustInherit in Visual Basic)
	The method from the base class can be abstract in C# (MustOverride in Visual Basic).
	The method from the base class can be virtual in C# (Overridable in Visual Basic).
	The method in the overriding class must have the override (Overrides in Visual Basic).

What is Polymorphism.explain diff types ?
	Ability to take more than one form is called polymorphism.
	overloading-compiletime/design time :the method will have same name but diff parameters
	overriding-Runtime : it's achieved by virtual and override keywords
What is method overloading ?
	Having different methods with same name but different parameters in a single class called method overloading
	a)diff no of parameters
		public void method(int a)	
		public void method(int a,int b)
	b)diff types of parameters
		public void m1(int a)
		public void m1(float a)
	c)diff order of parameters
		public void m1(int a,float b)
		public void m1(float b,int a)
Advantages of polymorphism 
	a)invoking child class functions dynamically
	b)maintance of code become easy
Inheritance
	1.parent classes constructor must be accessible to child class,otherwise inheriance not possible
	2.child class can access parent class members but parent classes can never access any member that
	  is purely defined under the child classes
	3.we can initialize a parent classes varible by using the child class instance
	  to make it as a reference 
		ex:class1 p; //p is a varible of Class1
		   class2 c=new class2(); // c is instance of class2
		   p=c; p is instance of parent class created by using child class instance
		reference of a class will not have any memory allocation
	Every class contains by default 4 methods
		1.Equals 2.GetHashCode 3.GetType 4.ToString
	Every class default parent class is Object(it's available in System namespace)
Types of Inheritance
	single
	multi-level
	Hierarchical
	Hybrid
	Multiple
Entity
	it's a living or non-living object as set of attributes
Method Overloading
Metod overriding	
	1.It's an approach of re-implementing a parent classes method under the child with the same signature
	2.in this case we define multiple methods with same name and same parameters
	3.This can be performed only between parent and child classes can never be performed with in the same class
  
Object
	1.An Object in an instance of a Class
	2.Technically, it is just a block of memory allocated that can be stored in the form of Variables, 
	  Array or a Collection
What are the fundamental OOP concepts?
	1.Encapsulation 
		a)The Internal representation of an object is hidden from the view outside objectâ€™s definition
		b)Only the required information can be accessed whereas the rest of the data implementation is hidden.
		c)Encapsulation means that a group of related properties, methods, and other members are treated as a
		  single unit or object.
		d)Encapsulation is used hide the member function, variable, etc. to the outside world.
	2.Abstraction
		a)
  








    
  
  
  
